Playlist Link: https://www.youtube.com/playlist?list=PLC3y8-rFHvwhC-j3x3t9la8-GQJGViDQk

React Storybook Tutorial - 1 - Introduction

Storybook: what & Why ?

Storybook is a development environment and playground for UI components.
It allows you to create components independently and showcase them interactively in an isolated development environment.
This means that Storybook runs outside of your main React application, so you can develop UI components in isolation without having to worry about the business logic.

Benefits of using Storybook:
View the different components that have already been developed as part of the app
See the different props that those developed components accept
Visually showcase those components to your stakeholders for feedback
Change the props on a component and immediately see the changes in the UI without having to move back and forth between the browser and your editor
Get feedback about the accessibility score of the component, like color contrast
Learning Storybook is a valuable skill to have as a React developer, especially if you are working on a team.

React Storybook Tutorial - 2.1 - Getting Started with V6

Storybook Initialization:
```
npx sb init
```
This command does lot of work behind the scene.

Storybook will look into your project depencies and provide best configuration available.

It create two thing
1) .storybook Folder
2) And Install lot of dev depenceies since it is totally isolated from actual developement.

.storybook folder has 2 files
1) Main - 
2) Preview - 

we export object with two prop
All files withing the source folder that end file .stories.mdx or stories.@(js.jsx.ts.tsx) has to treated as stories for storybook app.

addons - wil talk later.

Preview - It contains Configuration for your stories that you write.

Inside src folder we have stories that are added by storybook initialisation.

Initially we have 3 components
1) Button
2) Header
3) Page

We have introduction.storries.mdx - Which is landing page when you run storybook.

Each Component has 3 files
Button.jsx, Button.css & Button.stories.js

We will lookinto Button.stories.js inorder write stories for component.

React Storybook Tutorial - 3 - Writing Stories

bro deleted existing stories folder and starting from scratch :D

Written two Stories.
1) Button 
2) Input

```
import React from 'react';
import Button from './Button';

export default {
    title: 'Button',
    component: Button
}

export const Primary = () => <Button variant='primary'> Primary </Button>
export const Secondary = () => <Button variant='secondary'> Secondary </Button>
export const Success = () => <Button variant='success'> Success </Button>
export const Danger = () => <Button variant='danger'> Danger </Button>
```

named export represent story.
default export is for title in storybook.

And Suppose we want to show button inside form in storybook we can write like this in default export.

export default {
    title: 'Form/Button',       // <----- here
    component: Button
}

we can go 1 more level deep by this.


export default {
    title: 'Form/control/Button',       // <----- here
    component: Button
}

Renameing: 
we can rename exhisting story like this

export const Small = () => <Input variant='small' />
Small.storyName = 'Small Input';       <-- In storybook this story will look like "Small Input" instead of Small.

Sorting Stories:
.storybook/preview.js

options: { storySort: (a, b) => a.id === b.id ? 0 : a.id.localeCompare(b.id, undefined, { numeric: true }) }

Story withing Story:

just for example we also have 1 more story for Input.

```
import React from 'react';
import Input from './input';

export default {
    title: 'Form/Input',
    component: Input
}

export const Small = () => <Input variant='small' />
export const Med = () => <Input variant='med' />
export const Large = () => <Input variant='large' />

Small.storyName = 'Small Input';
```

Now we are directly using this  'Large' in another story as it. so don't need to specify other props once again but
we can take full advantage of args system.

let's create 1 more story.
// subscription.stories.js
```
import React from 'react';
import { Primary } from '../Button/Button.stories';
import { Large } from '../input/input.stories';

export default {
    title: 'form/Subscription'
}

export const PrimarySubscription = () => (
    <>
        <Large />
        <Primary />
    </>
)
```
Using args in V6
// Just another way of writing the above code in Button (stories). this way is more concise and reusable.
```
const Template = args => <Button {...args} />
export const PrimaryA = Template.bind({});
PrimaryA.args = {    
 variant: 'primary',
 children: 'Primary Argument'
}


export const LongPrimaryA = Template.bind({});
LongPrimaryA.args = {
    ...PrimaryA.args,
    children: 'Long Primary Ags'
}

export const SecondaryA = Template.bind({});
SecondaryA.args = {
    variant: 'secondary',
    children: 'Secondary Argument'
}
```
In this way you can extend the story from other props.

We can add args add component level so every story will receive the argument.

component level:

export default {
    title: 'Form/Button',
    component: Button,
    args: {
        chidren: 'Button'
    }
}

Now even if don't specify every story will have this children.
but if we write same args at story level it will overwrite the story.

export const LongPrimaryA = Template.bind({});
LongPrimaryA.args = {
    ...PrimaryA.args,
    children: 'Long Primary Ags'       // <--- More Priority will be given to this.
}

Decorators:

decorators are components that wrap a story. They allow you to add functionality to all your stories at once.

The video starts with an example of a button story where the button is placed to the left of the screen.
The instructor wants to place the button at the center of the screen.
This can be achieved with CSS.

To achieve this, a new component called `center` is created.
This component center aligns any content.

Center.js
```
import React from 'react'

function Center(props) {
  return (
    <div style={{ display: 'flex', justifyContent: 'center'}} >{props.children}</div>
  )
}

export default Center
```

The center component is then imported into the button.stories.js file. 
Every button story is wrapped with the center component. This way, all the buttons are center aligned.

```
export const Primary = () => <Center><Button variant='primary'> Primary </Button> </Center>
export const Secondary = () => <Center> <Button variant='secondary'> Secondary </Button> </Center>
export const Success = () => <Center> <Button variant='success'> Success </Button> </Center>
export const Danger = () => <Center> <Button variant='danger'> Danger </Button></Center>
```

The instructor then explains that decorators are components that wrap a story.
In this case, the center component is a decorator.
Storybook however makes it easier for us to specify decorators by letting us write it once and be used for every story

export default {
    title: 'Form/Button',
    component: Button,
    decorators: (story => <Center>{story()}</Center>)    <-- This line
}

We also have something called as global decorators previous one was the example of component level decorators.

To add global decorators, we need to create a new file in the storybook folder called preview.js.
In this file, we first make the necessary imports.

```
const preview = {
    parameters: {
        ...
    }
    decorators: [
        (Story) => (
          <Center>
            <Story />
          </Center>
        )
      ]
}
```
